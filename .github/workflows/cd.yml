name: CD
on:
  push:
    branches:
      - main
      - develop

jobs:
  build:
    runs-on: self-hosted
    outputs:
      profile: ${{ steps.set-profile.outputs.profile }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GIT_ACTION_TOKEN }}
          submodules: true

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Grant execute permission for Gradlew
        run: chmod +x gradlew

      - name: Set Spring profile by branch
        id: set-profile
        run: |
          if [ "${GITHUB_REF##*/}" = "develop" ]; then
            echo "PROFILE=dev" >> $GITHUB_ENV
            echo "profile=dev" >> $GITHUB_OUTPUT
          elif [ "${GITHUB_REF##*/}" = "main" ]; then
            echo "PROFILE=prod" >> $GITHUB_ENV
            echo "profile=prod" >> $GITHUB_OUTPUT
          else
            echo "PROFILE=dev" >> $GITHUB_ENV
            echo "profile=dev" >> $GITHUB_OUTPUT
          fi

      - name: Build with Gradle
        run: ./gradlew clean bootjar -Pprofile=${PROFILE}

      - name: Docker build & push
        run: docker buildx build -f ./docker/Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }} --push .

  deploy:
    runs-on: self-hosted
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy on server
        uses: appleboy/ssh-action@master
        env:
          PROFILE: ${{ needs.build.outputs.profile }}
          ENV_DEV: ${{ secrets.ENV_DEV }}
          ENV_PROD: ${{ secrets.ENV_PROD }}
        with:
          envs: PROFILE,ENV_DEV,ENV_PROD
          host: ${{ github.ref == 'refs/heads/main' && secrets.SSH_HOST_PROD || github.ref == 'refs/heads/develop' && secrets.SSH_HOST_DEV }}
          port: ${{ github.ref == 'refs/heads/main' && secrets.SSH_PORT_PROD || github.ref == 'refs/heads/develop' && secrets.SSH_PORT_DEV }}
          username: ${{ github.ref == 'refs/heads/main' && secrets.SSH_USERNAME_PROD || github.ref == 'refs/heads/develop' && secrets.SSH_USERNAME_DEV }}
          key: ${{ github.ref == 'refs/heads/main' && secrets.SSH_PRIVATE_KEY_PROD || github.ref == 'refs/heads/develop' && secrets.SSH_PRIVATE_KEY_DEV }}
          script: |
            if [ "${PROFILE}" = "dev" ]; then
              cd /home/ubuntu/actions-runner/_work/artium-be/artium-be/docker
              echo "$ENV_DEV" > ./.env
              echo "PROFILE=dev" >> ./.env
              docker compose -f docker-compose.yml -f docker-compose-dev.yml --env-file ./.env down
              docker compose -f docker-compose.yml -f docker-compose-dev.yml --env-file ./.env pull
              docker compose -f docker-compose.yml -f docker-compose-dev.yml --env-file ./.env up -d --build

            elif [ "${PROFILE}" = "prod" ]; then
              cd /home/ec2-user/actions-runner/_work/artium-be/artium-be/docker
              echo "$ENV_PROD" > ./.env
              echo "PROFILE=prod" >> ./.env 

              # 블루/그린 현재 활성 컨테이너 확인
              if docker ps --filter "name=app-blue" --filter "status=running" | grep app-blue > /dev/null; then
                ACTIVE_COLOR="blue"
              elif docker ps --filter "name=app-green" --filter "status=running" | grep app-green > /dev/null; then
                ACTIVE_COLOR="green"
              else
                ACTIVE_COLOR="green"
              fi

              # 배포할 색상 결정
              if [ "$ACTIVE_COLOR" = "blue" ]; then
                COLOR="green"
                PREV_COLOR="blue"
              else
                COLOR="blue"
                PREV_COLOR="green"
              fi

              echo "Starting $COLOR deployment"
              docker compose -f docker-compose.yml -f docker-compose-${COLOR}.yml pull
              docker compose -f docker-compose.yml -f docker-compose-${COLOR}.yml up -d --build

              echo "Waiting for $COLOR deployment to become healthy..."
              for i in {1..15}; do
                STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/actuator/health)
                if [ "$STATUS_CODE" = "200" ]; then
                  echo "Health check passed."
                  break
                else
                  echo "Health check not ready yet. Retrying in 5 seconds..."
                  sleep 5
                fi
              done

              if [ "$STATUS_CODE" != "200" ]; then
                echo "Health check failed. Aborting deployment."
                exit 1
              fi

              echo "Stopping previous $PREV_COLOR app container"
              docker compose -f docker-compose.yml -f docker-compose-${PREV_COLOR}.yml stop app-${PREV_COLOR} || true
            fi
